# -*- coding: utf-8 -*-
"""Drug_Recommendation_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZMW4x2GcrMn0bHARmq2EhLMXoo4KLxKf
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd # data preprocessing
import itertools # confusion matrix
import string
import numpy as np
import seaborn as sns
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
import matplotlib.pyplot as plt
# %matplotlib inline

# To show all the rows of pandas dataframe
pd.set_option('display.max_rows', None)

pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

# fetch dataset
drug_reviews_drugs_com = fetch_ucirepo(id=462)

drug_reviews_drugs_com

# data (as pandas dataframes)
X = drug_reviews_drugs_com.data.features
y = drug_reviews_drugs_com.data.targets

# metadata
print(drug_reviews_drugs_com.metadata)

# variable information
print(drug_reviews_drugs_com.variables)

data_flattened = [item[0] for item in drug_reviews_drugs_com.data]

# Convert the flattened data to a DataFrame
# The columns should be extracted from the 'feature_names' key in the dataset
df = pd.DataFrame(data_flattened, columns=drug_reviews_drugs_com.feature_names)

# Display the first few rows of the DataFrame
print(df.head())

drug_reviews_drugs_com.data

df2 = pd.DataFrame(drug_reviews_drugs_com.data.features, columns = drug_reviews_drugs_com.feature_names)

df2

df2.head()

# prompt: get me the size of my df2 dataframe

df2.shape

df2.condition.value_counts()

"""To make it simple we will select the top 4 medical conditions with maximum count"""

df_train = df2[(df2['condition']=='Birth Control') | (df2['condition']=='Depression') | (df2['condition']=='Pain')|(df2['condition']=='Anxiety') | (df2['condition']=='Acne') | (df2['condition']=='Insomnia') | (df2['condition']=='Weight Loss') | (df2['condition']=='Obesity') ]

X = df_train.drop(['drugName','rating','date','usefulCount'],axis=1)

X.condition.value_counts()

"""As we can observe from the sample reviews, it contains special symbols, “\r\n”, “”, etc."""

# First we will remove double quotes from the dataset
for i, col in enumerate(X.columns):
    X.iloc[:, i] = X.iloc[:, i].str.replace('"', '')

"""Next, we will create a review cleaning function that will remove HTML tags, lowercase the text reviews, retain only alphabets, remove stop words, and perform lemmatization."""

import nltk
nltk.download('stopwords')
nltk.download('wordnet')


from bs4 import BeautifulSoup
import re
from nltk.stem import WordNetLemmatizer
from nltk.corpus import stopwords

stop = stopwords.words('english')
lemmatizer = WordNetLemmatizer()

def review_to_words(raw_review):
    # 1. Delete HTML
    review_text = BeautifulSoup(raw_review, 'html.parser').get_text()
    # 2. Make a space
    letters_only = re.sub('[^a-zA-Z]', ' ', review_text)
    # 3. lower letters
    words = letters_only.lower().split()
    # 5. Stopwords
    meaningful_words = [w for w in words if not w in stop]
    # 6. lemmitization
    lemmitize_words = [lemmatizer.lemmatize(w) for w in meaningful_words]
    # 7. space join words
    return( ' '.join(lemmitize_words))

X['review_clean'] = X['review'].apply(review_to_words)

#creating feature and target variable
X_feat=X['review_clean']
y=X['condition']

X.head()

X['review'].iloc[6]

X['review_clean'].iloc[6]

X_train, X_test, y_train, y_test = train_test_split(X_feat, y,stratify=y,test_size=0.2, random_state=17)

"""### So, we are using 80% of the data for training the model and rest 20% for testing the model."""

# Next, we will vectorize the data using TF-IDF and use Bi-grams for the same.

tfidf_vectorizer2 = TfidfVectorizer(max_df=0.8, ngram_range=(1,2))
tfidf_train_2 = tfidf_vectorizer2.fit_transform(X_train)
tfidf_test_2 = tfidf_vectorizer2.transform(X_test)

import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay

def plot_confusion_matrix(cm, classes, figsize=(10, 7), fontsize=12):
    """
    Plots a confusion matrix with improved visibility for class labels.

    Parameters:
    - cm: Confusion matrix (2D array).
    - classes: List of class names corresponding to the labels.
    - figsize: Tuple indicating the figure size (width, height).
    - fontsize: Font size for the labels.
    """
    # Create the figure with a specified size
    plt.figure(figsize=figsize)

    # Create the ConfusionMatrixDisplay object
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)

    # Plot the confusion matrix
    disp.plot(cmap=plt.cm.Blues, ax=plt.gca(), values_format='d')

    # Rotate x-axis labels for better visibility
    plt.xticks(rotation=45, ha='right', fontsize=fontsize)
    plt.yticks(fontsize=fontsize)

    # Set the title
    plt.title('Confusion Matrix')
    plt.show()

"""**In the model building, we will use two main algorithms one is Multinomial Naive Bayes Algorithm as it usually works well on textual data and the other one is Passive-aggressive Classifier.**"""

mnb_tf = MultinomialNB()
mnb_tf.fit(tfidf_train_2, y_train)
pred = mnb_tf.predict(tfidf_test_2)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
cm = metrics.confusion_matrix(y_test, pred, labels=['Birth Control', 'Depression','Pain','Anxiety','Acne','Insomnia','Weight Loss','Obesity'])
plot_confusion_matrix(cm, classes=['Birth Control', 'Depression','Pain','Anxiety','Acne','Insomnia','Weight Loss','Obesity'])

pass_tf = PassiveAggressiveClassifier()
pass_tf.fit(tfidf_train_2, y_train)
pred = pass_tf.predict(tfidf_test_2)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
cm = metrics.confusion_matrix(y_test, pred, labels=['Birth Control', 'Depression','Pain','Anxiety','Acne','Insomnia','Weight Loss','Obesity'])
plot_confusion_matrix(cm, classes=['Birth Control', 'Depression','Pain','Anxiety','Acne','Insomnia','Weight Loss','Obesity'])

"""**As we can clearly see , we have passiveAggresiveClassifier as the correct model for this dataset**"""

# Now, we will analyze the top 10 most informative features for a particular medical condition.

def most_informative_feature_for_class(vectorizer, classifier, classlabel, n=10):
    labelid = list(classifier.classes_).index(classlabel)
    feature_names = vectorizer.get_feature_names_out()
    topn = sorted(zip(classifier.coef_[labelid], feature_names))[-n:]

    for coef, feat in topn:
        print (classlabel, feat, coef)

most_informative_feature_for_class(tfidf_vectorizer2, pass_tf, 'Anxiety')

"""**Now, to predict medical condition and recommend drugs based on predicted condition and reviews rating and useful count, we will create two functions i.e., top_drugs_extractor and predict_text**"""

def top_drugs_extractor(condition):
    df_top = df2[(df2['rating']>=9)&(df2['usefulCount']>=100)].sort_values(by = ['rating', 'usefulCount'], ascending = [False, False])
    drug_lst = df_top[df_top['condition']==condition]['drugName'].head(3).tolist()
    return drug_lst


def predict_text(lst_text):
    df_test = pd.DataFrame(lst_text, columns = ['test_sent'])
    df_test["test_sent"] = df_test["test_sent"].apply(review_to_words)
    tfidf_bigram = tfidf_vectorizer2.transform(df_test["test_sent"])
    prediction = pass_tf.predict(tfidf_bigram)
    df_test['prediction']=prediction
    return df_test

def predict_conditions_and_recommend_drugs(reviews):
    # Predict the conditions
    df_predictions = predict_text(reviews)

    results = []

    for index, row in df_predictions.iterrows():
        review = row['test_sent']
        predicted_condition = row['prediction']

        # Get top 3 recommended drugs for the predicted condition
        recommended_drugs = top_drugs_extractor(predicted_condition)

        results.append({
            'review': review,
            'predicted_condition': predicted_condition,
            'recommended_drugs': recommended_drugs
        })

    # Print the results
    for i, result in enumerate(results, 1):
        print(f"\nReview {i}:")
        print(f"Original review: {reviews[i-1][:100]}...")  # Print first 100 characters of original review
        print(f"Predicted medical condition: {result['predicted_condition']}")
        print("Top 3 recommended drugs:")
        for j, drug in enumerate(result['recommended_drugs'], 1):
            print(f"{j}. {drug}")
        print("-" * 50)

    return results

reviews = [
  "I have only been on Tekturna for 9 days. The effect was immediate. I am also on a calcium channel blocker (Tiazac) and hydrochlorothiazide. I was put on Tekturna because of palpitations experienced with Diovan (ugly drug in my opinion, same company produces both however). The palpitations were pretty bad on Diovan, 24 hour monitor by EKG etc. After a few days of substituting Tekturna for Diovan, there are no more palpitations.",
    "This is the third med I&#039;ve tried for anxiety and mild depression. Been on it for a week and I hate it so much. I am so dizzy, I have major diarrhea and feel worse than I started. Contacting my doc in the am and changing asap.",
    "I just got diagnosed with type 2. My doctor prescribed Invokana and metformin from the beginning. My sugars went down to normal by the second week. I am losing so much weight. No side effects yet. Miracle medicine for me",]

"""# **Checking the model output for given reviews**"""

predict_conditions_and_recommend_drugs(reviews)

condition_specific_reviews = [
    # Birth Control
    "I've been on the pill for about 6 months now. It's been great for regulating my cycle and my skin has cleared up a lot. The first month I had some nausea, but that's gone now. No pregnancy scares, so I'd say it's doing its job!",

    # Depression
    "I started taking Sertraline for my depression about 2 months ago. The first few weeks were rough with increased anxiety, but now I'm starting to feel more like myself. I have more energy and don't feel as hopeless. It's not a miracle cure, but it's definitely helping.",

    # Pain
    "I've been dealing with chronic back pain for years. My doctor prescribed Gabapentin and it's made a huge difference. The constant ache has reduced significantly, and I'm able to sleep through the night now. Some dizziness as a side effect, but it's manageable.",

    # Anxiety
    "Lexapro has been a game-changer for my anxiety. I used to have panic attacks almost daily, but now they're rare. I feel calmer and more in control. The dry mouth is annoying, but it's a small price to pay for peace of mind.",

    # Acne
    "I've been using tretinoin for my acne for about 3 months. The first month was terrible - my skin got way worse before it got better. But now? My skin is clearer than it's been in years. The dryness is real though, so moisturizer is a must.",

    # Insomnia
    "After years of tossing and turning, my doctor prescribed me Ambien. It's like night and day - literally! I fall asleep within 30 minutes of taking it and actually stay asleep. I do feel a bit groggy in the morning, but it's worth it for a full night's rest.",

    # Weight Loss
    "I started Phentermine for weight loss about a month ago. The appetite suppression is real - I have to remind myself to eat sometimes. I've lost 10 pounds so far. The downside is I feel jittery and my heart races sometimes. Keeping an eye on that.",

    # Obesity
    "My doctor put me on Contrave for obesity. It's been about 6 weeks and I've lost 15 pounds so far. My appetite has decreased a lot, which helps with portion control. The nausea was bad at first but it's getting better. Hoping to see continued results."
]

predict_conditions_and_recommend_drugs(condition_specific_reviews)

